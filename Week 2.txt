Pergunta 1

df_airports = df_airports.withColumn('alt',(
    F.when(
        F.col('alt') < 0, 0)
     .when(
        check_empty_column('alt'), "M").otherwise(F.col('alt'))
))
df_airports.select('*').where(df_airports.alt ==  0).show()
df_airports.show(20)
#apenas valores 0 na coluna alt
df_airports[df_airports.alt.isin('0')].show()

Pergunta 2

#valor em string A ou horario e data? 
    
df_airports = df_airports.withColumn('dst', (
    F.when(
        (F.col('tz') >= -7) &
        (F.col('tz') <= -5), 'A'
    ).otherwise(F.col('dst'))
))
    
df_airports.show(15)
#apenas valores min de -7 e max de -5 na coluna TZ
df_airports[df_airports.tz.isin(-7 ,-5)].show()

Pergunta 3
#apenas coluna dst com valor U
df_airports[df_airports.dst.isin('U')].show()
df_airports = df_airports.withColumn('dst', (
    F.when(
        (F.col('dst') == 'U'), 'A'
    ).otherwise(F.col('dst'))
))

df_airports.show(15)
#apenas coluna dst com valor U
df_airports[df_airports.dst.isin('A')].show()

Pergunta 4

#ALASKA: Quando a longitude for menor que -124.
#OFFSHORE: Quando a longitude for maior que -50 ou a latitude for menor que 24.
#MAINLAND-WEST: Quando a longitude for menor ou igual -95 na região dos EUA.
#MAINLAND-EAST: Quando a longitude for maior que -95 na região dos EUA.
#NaN: Caso não atenda nenhuma das condições acima

#check_column_range('lon', -50, 24)

df_airports = df_airports.withColumn('region', (
    F.when(
        F.col('lon') < -124, 'ALASKA'
    ).when(
        ((F.col('lon') > -50) |
         (F.col('lat') < 24)), 'OFFSHORE'
    ).when(
        F.col('lon') <= -95, 'MAINLAND-WEST'
    ).when(
        F.col('lon') >= -95, 'MAINLAND-EAST'
    ).otherwise('NaN')
))

df_airports.show(15)
#Conferindo se todos valores entraram
df_airports.select('region').distinct().show()

Pergunta 5
#AP: "Airport", "Tradeport", "Heliport", "Airpor", ou "Arpt"
#AD: "Aerodrome"
#AK : "Airpark" ou "Aero Park"
#AS : "Station" ou "Air Station"
#FL : "Field" ou "Fld"
#NaN : Caso não atenda nenhuma das condições acima

# Usando dataframe
AP_TYPES = ["Airport", "Tradeport", "Heliport", "Airpor", "Arpt"]

df_airports = df_airports.withColumn('type',(
        F.when(F.col('name').rlike(create_regex_from_list(AP_TYPES)), 'AP')
         .when(F.col('name').rlike("(AERODROME)"), 'AD')
         .when((
             (F.col('name').rlike(create_regex_from_list(["Airpark", 'Aero Park'])))), 'AS')
         .when(
             (F.col('name').rlike(create_regex_from_list(['Field', "Fld"]))), 'FL'
         ).otherwise('NaN')
    ))

df_airports.show(15)
df_airports.select('Type').distinct().show()

Pergunta 6

#True : "Base", "Aaf", "AFs", "Ahp", "Afb", "LRRS", "Lrrs", "Arb", "Naf", "NAS", "Nas", "Jrb", "Ns", "As", "Cgas", "Angb"
#False : Caso nenhuma substrig acima seja identificada

# Usando dataframe
MILITARY_TYPES = ["Base", "Aaf", "AFs", "Ahp", "Afb", "LRRS", "Lrrs", "Arb", "Naf", "NAS", "Nas", "Jrb", "Ns",
"As", "Cgas", "Angb"]

df_airports = df_airports.withColumn('military',(
        F.when(
            F.col('name').rlike(create_regex_from_list(MILITARY_TYPES)), True
        ).otherwise(False)
    ))

df_airports.show(15)
df_airports.select('military').distinct().show()
df_airports.select('*').where(df_airports.military == False).show()
df_airports[df_airports.military.isin(True)].show()
#apenas false
df_airports[df_airports.military.isin(False)].show()


Pergunta 7

#I: "International", "Intl", ou "Intercontinental"
#N: "National", "Natl"
#R : "Regional", "Reigonal", "Rgnl", "County", "Metro" ou "Metropolitan"
#M : "Municipal" "Muni", ou "City"
#NaN : Caso não atenda nenhuma das condições acima

#lists
I_TYPES = ["International", "Intl", "Intercontinental"]
N_TYPES = ["National", "Natl"]
R_TYPES = ["Regional", "Reigonal", "Rgnl", "County", "Metro" "Metropolitan"]
M_TYPES = ["Municipal", "Muni", 'City']

# Usando dataframe
df_airports = df_airports.withColumn('administration',(
        F.when(
            F.col('name').rlike(create_regex_from_list(I_TYPES)), 'I'
        ).when(
            F.col('name').rlike(create_regex_from_list(N_TYPES)), 'N'
        ).when(
            F.col('name').rlike(create_regex_from_list(R_TYPES)), 'R'
        ).when(
            F.col('name').rlike(create_regex_from_list(M_TYPES)), 'M'
        ).otherwise('NaN')
    ))

df_airports.show(15)
#conferindo valores
df_airports.select('administration').distinct().show()

# Considere o dataset planes.csv para realizar as seguintes tarefas:

data = df_planes.withColumn('tailchar',(
    F.when(check_empty_column('tailnum'), None)
     .when(F.col('tailnum').rlike(REGEX_NNUMBER) ,tailnum_chars(F.col('tailnum')))
) )
data.show(10)
#apenas false
df_planes[df_airports.military.isin(False)].show()

Pergunta 2
df_planes = df_planes.withColumn('year', (
    F.when(F.col('year') == 0, 1996)
     .otherwise(F.col('year'))
))

df_planes.show(10)


Pergunta 3

#Ordene por manufacturer, model e year
#Use o valor da primeira linha anterior que compartilhe os mesmos valores das seguintes colunas, em prioridade:
#A. manufacturer e model
#B. manufacturer

from pyspark.sql.window import Window

year_window = Window.partitionBy().orderBy("manufacturer", "model", "year")

valueColumns = ["manufacturer", "model", "year"]

data = df_planes.select(
    "*",
     *[F.lag(c).over(year_window).alias("old_" + c) for c in valueColumns]
)

df_planes = data.withColumn('year',(
                F.when(
                    (F.col('manufacturer') == F.col('old_manufacturer')) &
                    (F.col('model')        == F.col('old_model')), None
                ).when(
                    (F.col('manufacturer') == F.col('old_manufacturer')), None
                ).otherwise(F.col('year'))
            ))

df_planes.show()

df_planes.select('*').where(df_planes.year.isNotNull()).show()

Pergunta 4

from datetime import date

current_year = date.today().year

df_planes = df_planes.withColumn('age',(
                F.when(
                   check_empty_column('year'), None
                ).otherwise(( current_year - F.col('year')))
            ))

df_planes.show()
df_planes.select('*').where(df_planes.age.isNotNull()).show()

df_planes = df_planes.drop('old_manufacturer', 'old_model', 'old_year')

Pergunta 5
#Fixed wing multi engine: MULTI_ENG
#Fixed wing single engine: SINGLE_ENG
#Rotorcraft: ROTORCRAFT

data = df_planes.withColumn('type', (
    F.when(
        check_empty_column('type'), None
    ).when(
        F.col('type').rlike('.*(Fixed wing multi engine).*'), 'MULTI_ENG'
    ).when(
        F.col('type').rlike('.*(Fixed wing single engine).*'), 'SINGLE_ENG'
    ).when(
        F.col('type').rlike('.*(Rotorcraft).*'), 'ROTORCRAFT'
    )
))

data.select('*').where(df_planes.age.isNotNull()).show()
data.show(20)

Pergunta 6
#AIRBUS
#BOEING
#BOMBARDIER
#CESSNA
#EMBRAER
#SIKORSKY
#CANADAIR
#PIPER
#MCDONNELL DOUGLAS
#CIRRUS
#BELL
#KILDALL GARY
#LAMBERT RICHARD
#BARKER JACK
#ROBINSON HELICOPTER
#GULFSTREAM
#MARZ BARRY

# Usando dataframe

PLANES_MANUFACTURERS = ["AIRBUS","BOEING","BOMBARDIER","CESSNA","EMBRAER","SIKORSKY","CANADAIR","PIPER","MCDONNELL DOUGLAS","CIRRUS","BELL","KILDALL GARY","LAMBERT RICHARD","BARKER JACK","ROBINSON HELICOPTER","GULFSTREAM","MARZ BARRY"]
REGEX_MANUFACTURERS = r'|'.join(map(lambda x : f".*({x}).*", PLANES_MANUFACTURERS))
"""
def get_byregex_and_extract(r_pattern, col_to_search):
    return (getattr(re.search(r_pattern, F.col(col_to_search), re.IGNORECASE), 'groups', lambda:[""])().upper())

nteste = F.udf(get_byregex_and_extract)

data = df_planes.withColumn('q_manufacturer', (
                F.when(check_empty_column('manufacturer'), 'M')
                 .when(F.col('manufacturer').rlike(REGEX_MANUFACTURERS),
                    nteste(REGEX_MANUFACTURERS, 'manufacturers')
                 )
            ))

data.select('*').where(data.q_manufacturer.isNotNull()).show()"""

data = df_planes.withColumn('manufacturer',(
                F.when(check_empty_column('manufacturer'), 'M')
                 .when(
                     F.col('manufacturer').rlike('.*(AIRBUS).*'),"AIRBUS"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(BOEING).*'),"BOEING"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(BOMBARDIER).*'),"BOMBARDIER"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(CESSNA).*'),"CESSNA"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(EMBRAER).*'),"EMBRAER"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(SIKORSKY).*'),"SIKORSKY"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(CANADAIR).*'),"CANADAIR"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(PIPER).*'),"PIPER"
                 )
                 .when(
                    F.col('manufacturer').rlike('.*(MCDONNELL DOUGLAS).*'),"MCDONNELL DOUGLAS"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(CIRRUS).*'),"CIRRUS"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(BELL).*'),"BELL"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(KILDALL GARY).*'),"KILDALL GARY"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(LAMBERT RICHARD).*'),"LAMBERT RICHARD"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(BARKER JACK).*'),"BARKER JACK"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(ROBINSON HELICOPTER).*'),"ROBINSON HELICOPTER"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(GULFSTREAM).*'),"GULFSTREAM"
                 )
                 .when(
                     F.col('manufacturer').rlike('.*(MARZ BARRY).*'),"MARZ BARRY"
                 )
            ))

data.show()

#com rdd
#lambda manufacture:  manufacture, re.IGNORECASE), 'groups', lambda:[u""])()[0].upper()
#rdd_df_planes.map(lambda manufacturer: re.search(REGEX_MANUFACTURERS, manufacturer[3], re.IGNORECASE).group(1)  ).collect()
data = df_planes.withColumn('model', (
            F.when(
                F.col('model').rlike('\(.*\)'), F.regexp_replace('model', r'[(].*[)]', '')

            ).otherwise(F.col('model'))
        ))

#check for values with parentheses
data.select('*').where(data.model.rlike('\(.*\)')).sort(F.desc('model')).show()

parenthesis_sql = spark.getOrCreate().sql(
"""
select *,
        case 
            when model like '\(.*\)' then regexp_replace(model, '[(].*[)]', '')
        else
            model
        end as model

    from planes_view
"""
)

parenthesis_sql.show()

Pergunta 8
data = df_planes.withColumn("speed", (F.when(
                                    check_empty_column('speed'), (F.ceil(F.column('seats').cast(FloatType()) /.38))
                                ).otherwise(F.col('speed')))
                           )
data.show()

sql_results = spark.getOrCreate().sql("""
select
        *,
        case
            when 
               speed is null or speed like '' then ceil(seats/.38)
            else
               speed
        end as speed
    from planes_view
""") 

Pergunta 9
# 9. Crie a coluna engine_type (category) e atribua os valores a partir de substrings identificadas na coluna engine de acordo com as condições abaixo:
#FAN : "Turbo-fan"
#JET : "Turbo-jet"
#PROP : "Turbo-prop"
#SHAFT : "Turbo-shaft"
#CYCLE : "4 Cycle"

data = df_planes.withColumn('engine_type', (
    F.when(
        check_empty_column('engine'), 'M'
    ).when(
        F.col('engine') == 'Turbo-fan', 'FAN'
    ).when(
        F.col('engine') == 'Turbo-jet', 'JET'
   ).when(
        F.col('engine') == 'Turbo-prop', 'PROP'
   ).when(
        F.col('engine') == 'Turbo-shaft', 'SHAFT'
   ).when(
        F.col('engine') == '4 Cycle', 'Cycle'
   )
))

data.show()


#Fligths

Pergunta 1

data = df_flights.withColumn('hour',(
            F.when(
                check_empty_column('hour'), 0
            ).otherwise(F.col('hour'))
        )).withColumn('minute',(
            F.when(
                check_empty_column('minute'), 0
            ).otherwise(F.col('minute'))
        ))
data.select('*').where(F.col('hour').isNull() | F.col('minute').isNull()).show()

data.show()

df_flights = data

Pergunta 2
data = df_flights.withColumn('hour', (
    F.when(
        (F.col('hour') == 24), 0
    ).otherwise(F.col('hour'))
))

data.select('*').where(F.col('hour').isNull()).show()
data.select('*').where(F.col('hour') > 23).show()


data.show()

df_flights = data

Pergunta 3
mapping = F.create_map()
data = df_flights.withColumn('dep_datetime', (
    F.when(
        check_empty_column('minute'), None
    ).otherwise(F.concat(
        F.col('year'), F.lit('-'), F.col('month'),F.lit('-'),F.col('day'),
        F.lit(' '), F.col('hour'), F.lit(':'), F.col('minute'), F.lit(':00')
    ))
))

data.show()

df_flights = data

Pergunta 4
data = df_flights.withColumn('dep_time', (
    F.when(
        check_empty_column('dep_time'), (
                F.concat(
                    F.col('hour'), F.col('minute')
                )
        )
    ).otherwise(F.col('dep_time'))
))

data.show()

df_flights.select('*').where(df_flights.dep_time == None).show()

Pergunta 5
data = df_flights.withColumn('dep_delay', (
    F.when(
        (check_empty_column('dep_delay')), 0
    ).otherwise(F.col('dep_delay'))
))

data.select('*').where(F.col('dep_delay').isNull()).show()


data.show()

df_flights = data

Pergunta 6
data = df_flights.withColumn('arr_delay', (
    F.when(
        (check_empty_column('arr_delay')), 0
    ).otherwise(F.col('arr_delay'))
))

data.select('*').where(F.col('arr_delay').isNull()).show()


data.show()

df_flights = data

Pergunta 7
df_flights.show(10)

data = df_flights.drop(*('year', 'month', 'day', 'hour', 'minute'))
data.show(10)

df_flights = data






