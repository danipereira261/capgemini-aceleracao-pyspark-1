Pergunta 1
considere as seguintes chaves em comum:

airports_qa.faa

airports_qa.faa-flights_qa.dest,

planes_qa.tailnum-flights_qa.tailnum

#3 joins com planilha renomeadas em airports_qualidade2
qa_challenge_df = flights_qa.join(airports_qa, (flights_qa.fl_origin == airports_qa.air_faa) ,'left')\
                            .join(airports_qa2, (flights_qa.fl_destiny  == airports_qa2.air2_faa),'left')\
                            .join(planes_qa, (flights_qa.fl_tailnum == planes_qa.pl_tailnum),'left')
qa_challenge_df.show()

Pergunta 2
#criando no um novo DF 
all_cols_join = spark.getOrCreate().read.parquet("parquet_files/all_join.parquet")
#joined_dfs   = spark.getOrCreate().read.parquet("parquet_files/newjoin.parquet") lá em cima
joined_dfs.show()
joined_dfs.createOrReplaceTempView('reports_view')
#from collections import Counter
#import json

joined_dfs.printSchema( )

#transformation_c_dfs = spark.getOrCreate().read.parquet("parquet_files/transformed_join.parquet") lá em cima
for i in ['M', 'F', 'I', 'S', 'T']:
    print(i)
    qa_challenge_df.select([F.count(F.when(F.col(c) ==i, 1)).alias(c) 
    for c in 
    qa_challenge_df.columns]).show()

Pergunta 3
i, most_M = float('-inf'), '' #most_M = dados faltantes
results = []

for c in qa_challenge_df.columns:
    if 'qa' in c:
        results.append(qa_challenge_df.filter(~check_empty_column(c) & 
        (F.col(c) =='M')).groupBy(F.substring(c, 1, 1)
        .alias(c)).count().toPandas())

for _row in results:
    c = _row.columns[0]
    if _row.values.size:
        v = _row.values[0]
        if v[1] > i:
            i = v[1]
            most_F = c

print(most_M, ' tem maior aparições: ' ,i)

Pergunta 4
i, most_F = float('-inf'), ''
results = []
for c in qa_challenge_df.columns:
    if 'qa' in c:
        results.append(qa_challenge_df.filter((F.col(c)!='') & 
        (F.col(c) =='F')).groupBy(F.substring(c, 1, 1).alias(c)).count().toPandas())

for _row in results:
    c = _row.columns[0]
    if _row.values.size:
        v = _row.values[0]
        if v[1] > i:
            i = v[1]
            most_F = c

print(most_F, ' tem o maior valor: ' ,i)

Pergunta 5
results = []
# joins com planilha renomeadas em airports_qualidade2
# 5. Qual variável apresenta maior número de formatos errados?
for c in qa_challenge_df.columns:
    if 'qa' in c:
        results.append(qa_challenge_df.filter((F.col(c)!='') & 
        (F.col(c) =='I')).groupBy(F.substring(c, 1, 1).alias(c)).count().toPandas())

i, most_I = float('-inf'), '' 
for _row in results:
    c = _row.columns[0]
    if _row.values.size:
        v = _row.values[0]
        if v[1] > i:
            i = v[1]
            most_F = c

print(most_I, ' tem ' ,i , 'aparições fora do intervalo')


Pergunta 1
# Lendo arquivo parquet

flights_transform = (spark.getOrCreate().read
                          .format("parquet")
                          .option("header","True")
                          .load("./parquet_files/transformation_proc/flights_proc.parquet"))


# Lendo arquivo parquet
planes_transform = (spark.getOrCreate().read
                         .format("parquet")
                         .option("header","True")
                         .load("./parquet_files/transformation_proc/planes_proc.parquet"))

# Lendo arquivo parquet
airports_transform = (spark.getOrCreate().read
                           .format("parquet")
                           .option("header","True")
                           .load("./parquet_files/transformation_proc/airports_proc.parquet"))
# Renomeando colunas
flights_transform = flights_transform.select(*(F.col(x).alias('fl_' + x ) for x in flights_transform.columns))
planes_transform = planes_transform.select(*(F.col(x).alias('pl_' + x ) for x in planes_transform.columns))
airports_transform2 = airports_transform.select(*(F.col(x).alias('air2_' + x ) for x in airports_transform.columns))
airports_transform = airports_transform.select(*(F.col(x).alias('air_' + x ) for x in airports_transform.columns))
flights_transform.show()
transform_proc_df = flights_transform.join(airports_transform,  (flights_transform.fl_origin == airports_transform.air_faa) ,'left')\
                                     .join(airports_transform2, (flights_transform.fl_dest  == airports_transform2.air2_faa),'left')\
                                     .join(planes_transform,    (flights_transform.fl_tailnum == planes_transform.pl_tailnum),'left')
transform_proc_df.show()

Pergunta 2
# transform_proc_df.select(F.countDistinct('air_name')).groupBy('air_re   gion').orderBy('region').show() | #.agg(F.expr('count(distinct air_name)').alias("Aeroportos por regiao")).show()
#groupby e agregate

transform_proc_df.groupBy(F.col('air2_region').alias('regiões')).agg(F.expr('count(distinct air2_name)').alias('aeroportos por região')).show()

Pergunta 3
transform_proc_df.agg(F.max(F.col('air_alt')-
F.col('air2_alt')).alias("Maior diferença de altiude")).show() 

Pergunta 4
transform_proc_df.filter(transform_proc_df['fl_arr_delay'] > 0).agg(F.avg('fl_arr_delay').alias('Atraso médio das chegadas (em minutos)')).show()
transform_proc_df.filter(transform_proc_df['fl_dep_delay'] > 0).agg(F.avg('fl_dep_delay').alias('Atraso médio de partida (em minutos)')).show()
#.groupBy('fl_carrier') + agregate em fl_arr_delay e median

Pergunta 5
transform_proc_df.filter(transform_proc_df['fl_arr_delay'] > 0).groupBy(F.col('air2_region').alias('regiões')).agg(F.ceil(F.avg('fl_arr_delay')).alias('Atraso médio de chegada (em minutos)')).show()
transform_proc_df.filter(transform_proc_df['fl_dep_delay'] > 0).groupBy(F.col('air2_region').alias('regiões')).agg(F.ceil(F.avg('fl_dep_delay')).alias('Atraso médio de partida (em minutos)')).show()

Pergunta 6
transform_proc_df.filter((transform_proc_df['fl_arr_delay'] > 0) | (transform_proc_df['fl_dep_delay'] > 0)).groupBy(F.year(F.col('fl_dep_datetime')).alias('Ano')).agg((F.sum('fl_dep_delay') + F.sum('fl_arr_delay')).alias('Atraso de partida acumulado (em minutos)')).show()

Pergunta 7
transform_proc_df.groupBy(F.year(F.col('fl_dep_datetime')).alias('Ano'), F.col('air_region').alias('Região')).agg((F.sum('fl_dep_delay') + 
F.sum('fl_arr_delay')).alias('Atraso origem acumulado (em minutos)')).show()
transform_proc_df.groupBy(F.year(F.col('fl_dep_datetime')).alias('Ano'), F.col('air2_region').alias('Região')).agg((F.sum('fl_dep_delay') + 
F.sum('fl_arr_delay')).alias('Atraso destino acumulado (em minutos)')).show()

Pergunta 8
transform_proc_df.agg(F.ceil(F.avg('fl_air_time')).alias('Tempo médio de vôo (em minutos)')).show()

Pergunta 9
transform_proc_df.groupBy(F.col('air2_region').alias('regiões')).agg(F.ceil(F.avg('fl_air_time')).alias('Tempo médio de vôo (em minutos)')).show()

Pergunta 10
transform_proc_df.groupBy(F.col('fl_origin').alias('Origem'), F.col('fl_dest').alias('Destino')).agg(F.ceil(F.avg('fl_air_time')).alias('Tempo médio de vôo (em minutos)')).show(200)

Pergunta 11
transform_proc_df.groupBy(F.year(F.col('fl_dep_datetime')).alias('Ano')).agg(F.ceil(F.avg('fl_air_time')).alias('Tempo médio de vôo (em minutos)')).show()

Pergunta 12
transform_proc_df.groupBy(F.col('air2_region').alias('regiões')).agg(F.sum('fl_air_time').alias('Tempo de vôo acumulado (em minutos)')).show()

Pergunta 13
transform_proc_df.agg(F.round(F.avg('fl_distance')).alias('Distância de vôo médio (em milhas)')).show()

Pergunta 14
transform_proc_df.groupBy(F.col('air2_region').alias('regiões')).agg(F.round(F.avg('fl_distance')).alias('Distância de vôo médio (em milhas)')).show()

Pergunta 15
transform_proc_df.groupBy(F.col('fl_origin').alias('Origem'), F.col('fl_dest').alias('Destino')).agg(F.concat(F.round(F.avg('fl_distance')), F.lit(' mls')).alias('Distância de vôo médio (em milhas)')).show()

Pergunta 16
transform_proc_df.groupBy(F.year(F.col('fl_dep_datetime')).alias('Ano')).agg(F.concat(F.format_number(F.sum('fl_distance'), 1), F.lit(' milhas')).alias('Distância de vôo acumulado (em milhas)')).show()
#.agg(F.format_number(F.sum('fl_distance'), 1).alias('Distância de vôo acumulado (em milhas)')).show()

Pergunta 17
transform_proc_df.groupBy(F.col('air2_region').alias('regiões')).agg(F.concat(F.format_number(F.sum('fl_distance'), 1), F.lit('mls')).alias('Distância de vôo acumulado (em milhas)')).show()

Pergunta 18
transform_proc_df.groupBy(F.col('fl_origin').alias('Origem'), F.col('fl_dest').alias('Destino') ).agg(F.format_number(F.ceil(F.avg('pl_seats')), 0).alias('Número médio de passageiros por rota')).show()

Pergunta 19
transform_proc_df.groupBy(F.year(F.to_timestamp('fl_dep_datetime')).alias('Ano')).agg(F.format_number(F.ceil(F.sum('pl_seats')), 0).alias('Número acumulado de passageiros por ano')).show()

Pergunta 20
transform_proc_df.groupBy(F.col('fl_dest').alias('Destino')).count().orderBy(F.col('count').desc()).withColumnRenamed('count', 'Quantidade de viagens').show(1)

Pergunta 21
transform_proc_df.groupBy(F.col('fl_dest').alias('Destino')).agg(F.sum('pl_seats').alias('sum_seats')).orderBy(F.col('sum_seats').desc()).withColumnRenamed('sum_seats', 'Quantidade de passageiros').show(1)

Pergunta 22
transform_proc_df.select(F.col('fl_origin').alias('Origem'),F.col('fl_dest').alias('Destino'),F.concat(F.format_number(F.col('fl_distance'), 1), F.lit(' mls')).alias('Distância em milhas')).filter((F.col('fl_origin') == 'PDX')| 
(F.col('fl_dest') == 'PDX')).orderBy(F.col('fl_distance').desc()).show(1)

Pergunta 23
transform_proc_df.groupBy(F.col('fl_dest').alias('Destino')).count().orderBy(F.col('count').desc()).withColumnRenamed('count', 'Total de viagens').show(1)

Pergunta 24
transform_proc_df.select('*').groupBy(F.col('pl_model').alias('Modelo')).count().orderBy(F.col('count').desc()).withColumnRenamed('count', 'Quantidade').show(1)

Pergunta 25
transform_proc_df.filter(F.col('pl_model').isNotNull()).groupBy(F.col('fl_dest').alias('Destino'), F.col('pl_model').alias('Modelo')).count().orderBy(F.col('count').desc()).withColumnRenamed('count', 'Quantidade').show(1)

Pergunta 26
transform_proc_df.groupBy(F.col('fl_haul_duration').alias('Haul Duration')).agg(F.ceil(F.avg('pl_engines')).alias('Número médio de motores')).show()

Pergunta 27
transform_proc_df.groupBy(F.col('fl_dep_season').alias('Estação do ano')).count().orderBy(F.col('count').desc()).withColumnRenamed('count', 'Quantidade de vôos').show(1) 

Pergunta 28
data = transform_proc_df.groupBy(F.col('fl_dep_season'), F.col('fl_dest')).count().orderBy(F.col('count').desc())
maxs =  data.groupBy(F.col('fl_dest').alias('max_fl_dest')).agg(F.max('count').alias('max')).alias('maxs')

result = data.join(maxs,
             F.col('count') == F.col('max') 
         ).select('*')

Pergunta 29
transform_proc_df.groupBy('fl_dep_delay_category').count().orderBy(F.col('count').desc()).withColumnRenamed('count', 'Quantidade').show()
flights_qa.show()


Pergunta 30
data = transform_proc_df.groupBy(F.col('fl_dep_delay_category'), F.col('fl_origin'), F.col('fl_dest'))\
                        .count()\
                        .orderBy(F.col('count').desc())
maxs =  data.groupBy(F.col('fl_origin').alias('max_fl_origin'), F.col('fl_dest').alias('max_fl_dest')).agg(F.max('count').alias('max')).alias('maxs')

results = data.join(maxs,data['count'] == maxs['max'], 'inner')

results.select(F.col('fl_dep_delay_category').alias('Categoria'), F.col('fl_origin').alias('Origem'), F.col('fl_dest').alias('Destino'), F.col('count').alias('Quantidade'))\
       .orderBy(F.col('count').desc())\
       .show()


