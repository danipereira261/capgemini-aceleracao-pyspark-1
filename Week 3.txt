Pergunta 1

from pyspark.sql.functions import col, when, length
import re

airport_df = airport_df.withColumn("qa_faa", 
             when((col("faa") == "") |
             (col("faa").isNull()) , "M")\
            .when(
                 (length("faa").between(3 , 5)) &
                 (col('faa').rlike(REGEX_ALPHA)) | (col('faa').rlike('^([^0-9]*)$')), "F"
            )\
            .otherwise(col('faa'))

Pergunta 2
# M : Indica que está com dado faltante.

airport_df = airport_df.withColumn("qa_name", 
             when((col("name") == "")     |
                  (col("name").isNull())  |
                  (col('faa').rlike('\t') |
                  (col('faa').rlike(' +'))), "M")\
           .otherwise(col('name'))
        )

Pergunta 3
M : Indica que está com dado faltante. ✔️
I : Indica que o valor excede o intervalo [-180, 180]. ✔️
A : Indica que o valor é alfanumérico. ✔️

airport_df = airport_df.withColumn("qa_lat", 
             when((col("lat") == "")      |
                  (col("lat").isNull())   |
                  (col('lat').rlike('\t') |
                  (col('lat').rlike(' +'))), "M")\
             .when(
                 (col("lat") > '180.0') & 
                 (col("lat") < '-180.0'), "I"
            )\
            .when((col('lat').rlike('[a-zA-Z ]')), "A")
            .otherwise(col('lat'))
        )

Pergunta 4
M : Indica que está com dado faltante. ✔️
I : Indica que o valor excede o intervalo [-180, 180]. ✔️
A : Indica que o valor é alfanumérico. ✔️

airport_df = airport_df.withColumn("qa_lon", 
             when((col("lon") == "")      |
                  (col("lon").isNull())   |
                  (col('lon').rlike('\t') |
                  (col('lon').rlike(' +'))), "M")\
             .when(
                 (col("lon") > '180.0') & 
                 (col("lon") < '-180.0'), "I"
            )\
            .when((col('lon').rlike('[a-zA-Z ]')), "A")
            .otherwise(col('lon'))

Pergunta 5
M : Indica que está com dado faltante. ✔️
I : Indica que o valor excede o intervalo [0, +∞). ✔️
A : Indica que o valor é alfanumérico. ✔️

airport_df = airport_df.withColumn("qa_alt", 
             when((col("alt") == "")      |
                  (col("alt").isNull())   |
                  (col('alt').rlike('\t') |
                  (col('alt').rlike(' +'))), "M")\
             .when((col("alt") < '0'), "I")\
            .when( (col('alt').rlike('[a-zA-Z ]')), "A")
            .otherwise(col('alt'))
        )

Pergunta 6
M : Indica que está com dado faltante. ✔️
I : Indica que o valor excede o intervalo [-11, +14]. ✔️
A : Indica que o valor é alfanumérico. ✔️

airport_df = airport_df.withColumn("qa_tz", 
             when((col("tz") == "")      |
                  (col("tz").isNull())   |
                  (col('tz').rlike('\t') |
                  (col('tz').rlike(' +')) ), "M")\
             .when((col("tz") < '-11.0') &
                   (col("tz") > '14.0'), "I")\
            .when( (col('tz').rlike('[a-zA-Z ]')), "A")
            .otherwise(col('tz'))
        )

Pergunta 7
M : Indica que está com dado faltante. ✔️
C : Indica que o valor não pertence a nenhuma das categorias esperadas → E, A, S, O, Z, N, U. ****
N : Indica que o valor é numérico. ✔️

expected_categorys = ["E", "A", "S", "O", "Z", "N", "U"]

airport_df = airport_df.withColumn("qa_dst", 
            when((col("dst") == "")      |
                 (col("dst").isNull())   |
                 (col('dst').rlike('\t') |
                 (col('dst').rlike(' +')) ), "M")\
            .when( (col('dst').rlike('([0-9])') == True), "N")\
            .when((col("dst").isin(expected_categorys) == False) , "C")\
            .otherwise(col('dst'))
        )


#Adicionando o Planes 

#lets describe our new file
planes_file = "./datasets/planes.csv"

#set our schema (that you can see on glossary)
schema = StructType([
    StructField("tailnum",      StringType()),
    StructField("year",         IntegerType()),
    StructField("type",         StringType()),
    StructField("manufacturer", StringType()),
    StructField("model",   StringType()),
    StructField("engines", IntegerType()),
    StructField("seats",   IntegerType()),
    StructField("speed",   IntegerType()),
    StructField("engine",  StringType())
])


#lets take the rdd to work with too
planes_rdd = planes_df.rdd

#don't forget to create a view (important to work with spark sql)
planes_df.createOrReplaceTempView('planes_view')
planes_rdd.take(10)
planes_df.show(10)

Pergunta 1
planes_df = planes_df.withColumn("qa_tailnum", 
                when((col("tailnum") == "")      |
                    (col("tailnum").isNull())   |
                    (col('tailnum').rlike('\t') |
                    (col('tailnum').rlike(' +'))), "M")\
                .when((length("tailnum") != 5), "S")\
                .when(
                    (col('tailnum').substr(1, 1) != 'N')   &
                    (col('tailnum').substr(-1, -1) != 'Z') & 
                    (col('tailnum').substr(2,4).rlike('^([^0-9]*)$')), "F")\
                .when((col("tailnum").substr(1,1) == "I")  |
                    (col("tailnum").substr(1,1) == "O") |
                    (col("tailnum").substr(1,1) == "0"), "FE")\
                .when((col("tailnum").substr(1,1) != "N"),  "FN")\
                .otherwise(col('tailnum'))
            )

planes_df.show()

Pergunta 2
M : Indica que está com dado faltante.
I : Indica que o valor excede o intervalo [1950, +∞).

planes_df = planes_df.withColumn("qa_year", 
                when((col("year") == "")      |
                    (col("year").isNull())   |
                    (col('year').rlike('\t') |
                    (col('year').rlike(' +'))), "M")\
                .when((col("year") < 1950), "I")\
                .otherwise(col('year'))
            )
planes_df.select('qa_year').show()

Pergunta 3
M : Indica que está com dado faltante.
C : Indica que o valor não pertence a nenhuma categoria esperada:
Fixed wing multi engine
Fixed wing single engine
Rotorcraft

type_categories = ['Fixed wing multi engine', 'fixed wing single engine', 'Rotorcraft']

planes_df = planes_df.withColumn("qa_type", 
                when((col("type") == "")      |
                    (col("type").isNull())   |
                    (col('type').rlike('\t') |
                    (col('type').rlike(' +'))), "M")\
                .when((col("type").isin(type_categories) == False),  "C")\
                .otherwise(col('type'))
            )

planes_df.select('qa_type').show()

Pergunta 4
M : Indica que está com dado faltante.
C : Indica que o valor não pertence a nenhuma categoria esperada: AIRBUS BOEING BOMBARDIER CESSNA EMBRAER SIKORSKY CANADAIR PIPER MCDONNELL DOUGLAS CIRRUS BELL KILDALL GARY LAMBERT RICHARD BARKER JACK ROBINSON HELICOPTER GULFSTREAM MARZ BARRY

manufacture_categories = ["AIRBUS", "BOEING","BOMBARDIER","CESSNA","EMBRAER","SIKORSKY","CANADAIR",
                          "PIPER","MCDONNELL DOUGLAS","CIRRUS","BELL","KILDALL GARY","LAMBERT RICHARD",
                          "BARKER JACK","ROBINSON HELICOPTER","GULFSTREAM","MARZ BARRY"]

#using a udf
from pyspark.sql.functions import udf
from pyspark.sql.types import StructType


# dica do eugênio -> df.map(lambda x: any([x.contains(f"%{y}%") for y in MANUFACTURERS]))

@udf
def qa_manufacturer(el):
    if(any([el.__contains__(f"{y}") for y in manufacture_categories])):
        return el
    else:
        return "M"

planes_df.select("manufacturer", qa_manufacturer('manufacturer')).show()

#lets go back to our df

planes_df = planes_df.withColumn("qa_manufacturer", 
                when((col("manufacturer") == "")      |
                    (col("manufacturer").isNull()), "M")\
                .when(
                    (col("manufacturer").contains("AIRBUS%")) |
                    (col("manufacturer").contains("BOEING%")) |
                    (col("manufacturer").contains("BOMBARDIER%")) |
                    (col("manufacturer").contains("CESSNA%"))   |
                    (col("manufacturer").contains("EMBRAER%"))  |
                    (col("manufacturer").contains("SIKORSKY%")) |
                    (col("manufacturer").contains("CANADAIR%")) |
                    (col("manufacturer").contains("PIPER%"))    |
                    (col("manufacturer").contains("MCDONNELL DOUGLAS%")) |
                    (col("manufacturer").contains("CIRRUS%")) |
                    (col("manufacturer").contains("BELL%"))   |
                    (col("manufacturer").contains("KILDALL GARY%"))    |
                    (col("manufacturer").contains("LAMBERT RICHARD%")) |
                    (col("manufacturer").contains("BARKER JACK%"))     |
                    (col("manufacturer").contains("ROBINSON HELICOPTER%")) |
                    (col("manufacturer").contains("GULFSTREAM%")) |
                    (col("manufacturer").contains("MARZ BARRY%")), "C"
                    )\
                .otherwise(col('manufacturer'))
            )
planes_df.select('qa_manufacturer').show()

Pergunta 5
"""
M : Indica que está com dado faltante.
F : Indica que não respeita o formato esperado:
Modelos AIRBUS devem começar com "A"
Modelos BOEING devem começar com "7"
Modelos BOMBARDIER e CANADAIR devem começar com "CL"
Modelos MCDONNELL DOUGLAS devem começar com "MD" ou "DC"
"""

planes_df = planes_df.withColumn("qa_model", 
                when((col("model") == "")     |
                    (col("model").isNull())   |
                    (col('model').rlike('\t') |
                    (col('model').rlike(' +'))), "M")\
                .when(
                    (col('manufacturer') == "AIRBUS") &
                    (col('model').substr(1, 1) != 'A'), "F")\
                .when(
                    (col('manufacturer') == "BOEING") &
                    (col('model').substr(1, 1) != '7'), "F")\
                .when(
                    ((col('manufacturer') == "BOMBARDIER") |
                    (col('manufacturer') == "CANADAIR"))   &
                    (col('model').substr(1, 1) != 'CL'), "F")\
                .when(
                    (col('manufacturer') == "MCDONNELL DOUGLAS") &
                    ((col('model').substr(1, 1) != 'MD') |
                    (col('model').substr(1, 1) != 'DC')), "F")\
                .otherwise(col('model'))
            )
planes_df.select('qa_model').show()

Pergunta 6
M : Indica que está com dado faltante.
I : Indica que o valor excede o intervalo [1, 4].
A : Indica que o valor é alfanumérico

planes_df = planes_df.withColumn("qa_engines", 
                when((col("engines") == "") |
                    (col("engines").isNull()), "M")\
                .when((col("engines") < 1) |
                    (col("engines") > 4), "I")\
                .when((col('engines').rlike('^[0-9]*$') == False), "A")\
                .otherwise(col('engines'))
            )
planes_df.select('qa_engines').show()

Pergunta 7
planes_df = planes_df.withColumn("qa_seats", 
                when((col("seats") == "")      |
                    (col("seats").isNull()), "M")\
                .when((col("seats") < 2) |
                    (col('seats') > 500), "S")\
                .when((col('seats').rlike('^([^0-9]*)$') == False), "F")\
                .otherwise(col('seats'))
            )
planes_df.show()

Pergunta 8
planes_df = planes_df.withColumn("qa_speed", 
                when((col("speed") == "")      |
                    (col("speed").isNull()), "M")\
                .when((col("speed") < 50.0) |
                    (col('speed') > 150.0), "S")\
                .when((col('speed').rlike('^([^0-9]*)$') == False), "F")\
                .otherwise(col('speed'))
            )
planes_df.select('qa_speed').show()

Pergunta 9
engine_categories = ["Turbo-fan", "Turbo-jet","Turbo-prop","Turbo-prop","4 Cycle"]

planes_df = planes_df.withColumn("qa_engine", 
                when((col("engine") == "")      |
                    (col("engine").isNull()), "M")\
                .when(
                    (col("engine").contains("Turbo-fan%")) |
                    (col("engine").contains("Turbo-jet%")) |
                    (col("engine").contains("Turbo-prop%")) |
                    (col("engine").contains("Turbo-shaft%"))   |
                    (col("engine").contains("Cycle%")), "C"
                    )\
                .otherwise(col('engine'))
            )
planes_df.select('qa_engine').show()

#Flights
#vamos configura-lo

flights_file = "./datasets/flights.csv"

#set our schema (that you can see on glossary)
schema = StructType([
    StructField("year",  IntegerType()),
    StructField("month", IntegerType()),
    StructField("day",   IntegerType()),
    StructField("dep_time",  IntegerType()),
    StructField("dep_delay", IntegerType()),
    StructField("arr_time",  IntegerType()),
    StructField("arr_delay", IntegerType()),
    StructField("carrier",   StringType()),
    StructField("tailnum",   StringType()),
    StructField("flight",  IntegerType()),
    StructField("origin",  StringType()),
    StructField("destiny", StringType()),
    StructField("air_time", IntegerType()),
    StructField("distance", IntegerType()),
    StructField("hour",    IntegerType()),
    StructField("minute",  IntegerType())
])

#don't forget to create a view (important to work with spark sql)
flights_df.createOrReplaceTempView('flights_view')

flights_df.show()

Pergunta 1
MY : Indica que está com dado faltante no ano.
MM : Indica que está com dado faltante no mes.
MD : Indica que está com dado faltante no dia.
IY : Indica que o valor excede o intervalo [1950, +∞) no ano.
IM : Indica que o valor excede o intervalo [1, 12] no mês.
ID : Indica que o valor excede o intervalo [1,31] no dia. No mês de Fevereiro o intervalo é [1, 29]

flights_df = flights_df.withColumn("qa_year_month_day",
                when((col('year').isNull()) | 
                    ((col('year') == '')), 'MY')\
                .when( (col('month').isNull()) | 
                    (col('month') == ''), 'MM')\
                .when( (col('day').isNull()) | 
                    (col('day') == ''), 'MD')\
                .when((col('year') < 1950 ), "IY")\
                .when((col('month') < 1 ) |
                    (col('month') > 12 ), "IM")\
                .when((
                    (col('month') == 2) &
                    ((col('day') < 1 ) |
                    (col('day') > 29 ))
                    ) |
                    ((col('month') != 2) &
                    ((col('day') < 1 ) |
                    (col('day') > 31 ))
                    ), "ID")\
            )
flights_df.select('qa_year_month_day').show()

Pergunta 2
MH : Indica que está com dado faltante na hora.
MM : Indica que está com dado faltante no minuto.
IH : Indica que o valor excede o intervalo [0, 24] na hora.
IM : Indica que o valor excede o intervalo [0,59] no minuto.

flights_df = flights_df.withColumn("qa_hour_minute",
                when((col('hour').isNull()) | 
                    ((col('hour') == '')), 'MH')\
                .when( (col('minute').isNull()) | 
                    (col('minute') == ''), 'MM')\
                .when( (length('hour') == 1) & ( (col('hour').substr(1,1) < 0) | (col('hour').substr(1,1) > 24) ) |
                    (length('hour') == 2) & ((col('hour').substr(1,2) < 0) | (col('hour').substr(1,2) > 24) ), 'IH')\
                .when( ((length('minute') == 1) & ((col('hour').substr(2,3) < 0) | (col('hour').substr(2,3) > 9))) |
                    ((length('minute') == 2) & ((col('hour').substr(3,4) < 0) | (col('hour').substr(3,4) > 59) )), 'IM')\
            )
flights_df.select('qa_hour_minute').show()

Pergunta 3
MD : Indica que está com dado faltante no dep_time.
MA : Indica que está com dado faltante no arr_time.
FD : Indica que não respeita o formato esperado (HHMM ou HMM) no dep_time.
FA : Indica que não respeita o formato esperado (HHMM ou HMM) no arr_time.

flights_df = flights_df.withColumn("qa_dep_arr_time",
                when((col("dep_time") == "") |
                    (col("dep_time").isNull()), "MD")\
                .when((col("arr_time") == "") |
                    (col("arr_time").isNull()), "MA")
                .when( (length('dep_time') == 3) & ( (col('dep_time').substr(1,1) < 0) | (col('dep_time').substr(1,1) > 24) ) |
                    (length('dep_time') == 4) & ((col('dep_time').substr(1,2) < 0) | (col('dep_time').substr(1,2) > 24) ), 'FD')\
                .when( ((length('arr_time') == 3) & ((col('arr_time').substr(2,3) < 0) | (col('arr_time').substr(2,3) > 59))) |
                    ((length('arr_time') == 4) & ((col('arr_time').substr(3,4) < 0) | (col('arr_time').substr(3,4) > 59) )), 'FA')\
            )
flights_df.select('qa_dep_arr_time').show()

Pergunta 4
MD : Indica que está com dado faltante no dep_delay.
MA : Indica que está com dado faltante no arr_delay.

flights_df = flights_df.withColumn("qa_dep_arr_delay", 
                when((col("dep_delay") == "") |
                    (col("dep_delay").isNull()), "MD")\
                .when((col("arr_delay") == "") |
                    (col("arr_delay").isNull()), "MA")
            )
flights_df.select('qa_dep_arr_delay').show()

Pergunta 5
flights_df = flights_df.withColumn("qa_carrier", 
                when((col("carrier") == "") |
                    (col("carrier").isNull()), "M")\
                .when((length("carrier") != 2), "F")\
                .otherwise(col('carrier'))
            )
flights_df.select('qa_carrier').show()

Pergunta 6
M : Indica que está com dado faltante.
S : Indica que não tem o número de caracteres esperado.
F : Indica que não respeita o formato esperado (ex N1234Z ou N123AZ).
FN : Indica que não inicia com a letra 'N'.
FE : Indica que contém caracteres inválidos ("I", "O", ou 0 como primeiro digito).

planes_df = planes_df.withColumn("qa_tailnum", 
                when((col("tailnum") == "")      |
                    (col("tailnum").isNull())   |
                    (col('tailnum').rlike('\t') |
                    (col('tailnum').rlike(' +'))), "M")\
                .when((length("tailnum") != 5), "S")\
                .when(
                    (col('tailnum').substr(1, 1) != 'N')   &
                    (col('tailnum').substr(-1, -1) != 'Z') & 
                    (col('tailnum').substr(2,4).rlike('^([^0-9]*)$')), "F")\
                .when((col("tailnum").substr(1,1) == "I")  |
                    (col("tailnum").substr(1,1) == "O") |
                    (col("tailnum").substr(1,1) == "0"), "FE")\
                .when((col("tailnum").substr(1,1) != "N"),  "FN")\
                .otherwise(col('tailnum'))
            )
planes_df.show()

Pergunta 7
M : Indica que está com dado faltante.
F : Indica que não respeita o formato esperado (4 caracteres numéricos).

flights_df =flights_df.withColumn("qa_flight", 
                when((col("flight") == "") |
                    (col("flight").isNull()), "M")\
                .when((col('flight').rlike('[0-9]{4}') == False), "F")\
                .otherwise(col('flight'))
            )
flights_df.select('qa_flight').show()

Pergunta 8
MO : Indica que está com dado faltante no origin.
MD : Indica que está com dado faltante no dest.
FO : Indica que não respeita o formato esperado (3 caracteres alfanuméricos) no origin.
FD : Indica que não respeita o formato esperado (3 caracteres alfanuméricos) no dest.
flights_df = flights_df.withColumn("qa_origin_dest", 
                when((col("origin") == "") |
                    (col("origin").isNull()), "MO")\
                .when((col("dest") == "") |
                    (col("dest").isNull()), "MD")\
                .when(((col('origin').rlike('([A-Z]|[a-z]|[0-9]{3})') == False) | (length('origin') != 3)), "FO")\
                .when(((col('dest').rlike('([A-Z]|[a-z]|[0-9]{3})') == False) | (length('dest') != 3)), "FD")\
            )
flights_df.select('qa_origin_dest').show()

Pergunta 9
M : Indica que está com dado faltante.
I : Indica que o valor excede o intervalo [20, 500].

flights_df = flights_df.withColumn("qa_air_time", 
                when((col("air_time") == "") |
                    (col("air_time").isNull()), "M")\
                .when((col("air_time") < 20) |
                    (col("air_time") > 500), "I")\
                .otherwise(col('air_time'))
            )
flights_df.select('qa_air_time').show()

Pergunta 10
M : Indica que está com dado faltante.
I : Indica que o valor excede o intervalo [50, 3000].

flights_df =flights_df.withColumn("qa_distance", 
                when((col("distance") == "") |
                    (col("distance").isNull()), "M")\
                .when((col("distance") < 50) |
                    (col("distance") > 3000), "I")\
                .otherwise(col('distance'))
            )
flights_df.select('qa_distance').show()

Pergunta 11
M : Indica que está com distance ou air_time faltante.
TL : Indica que a viagem é longa de acordo com a condição: air_time >= distance x 0.1 + 30
TS : Indica que viagem é curta de acordo com a condição: air_time <= distance x 0.1 + 10
TR : Indica que a viagem é normal caso as duas anteriores não sejam verdade.

flights_df =flights_df.withColumn("qa_airtime", 
                when((col("air_time") == "") |
                    (col("air_time").isNull()), "M")\
                .when((col("air_time") >= (col('distance') * .1 ) + 30), "TL")\
                .when((col("air_time") <= (col('distance') * .1 ) + 10), "TS")\
                .when( ((col("air_time") >= (col('distance') * .1 ) + 30) &
                        ((col("air_time") <= (col('distance') * .1 ) + 10))) == False, "TR")\
            )
flights_df.select('qa_airtime').show()

          